前端自动化测试包括TDD/BDD/集成测试，并非指单元测试，区分在什么情况使用什么测试（TDD/BDD）

https://vue-test-utils.vuejs.org/zh/guides/#用-jest-测试单文件组件
https://vue-test-utils.vuejs.org/api/#mount


TDD 是一种开发模式（测试驱动开发的流程）
单元测试 是单个方法的测试 
（
测试组件的时候，业务耦合度高导致修改业务逻辑就需要修改测试代码
增加工作量，增加了测试代码，有时候测试代码比业务代码还多
单元测试只保证到某个单元是正常，但整体运行还是具有不确定性
）


TDD的开发流程
0先不着急写代码
1编写测试用例
2运行测试，（这时候测试用例无法通过测试）
3编写代码，使用测试用例通过测试
4优化代码，完成开发。
5功能的迭代，重复以上的步骤

TDD的优势
1长期减少回归bug。因为每次的迭代都会重新跑以前的测试用例，就会减少行代码导致历史代码的bug
2代码质量会更好（组织，可维护性），写测试用例的时候同时就会组织代码的编写结构
3测试覆盖率高
4错误测试代码不容易出现 例如


TDD适用场景：
不适合业务逻辑强的项目或者说带有业务逻辑的某个功能，因会导致双倍工作量（先改测试用例，再改逻辑）
适合验证工具库的项目例如lodash


////////////////////////////////////////////////////////////////////////////////////////////////


BDD 
代码测试覆盖率就没有TDD的高，所以BDD测试业务代码，TDD测试工具代码（utilds里的具体某些方法）
行为驱动开发、其实一般都属于集成测试，一般用mount深渲染整个组件数  shallowMount（为浅渲染）
1先写业务代码（不关心测试）
2-0思考用户行为是怎样的，哪些行为是重要得（基于用户的测试行为来编写测试用例代码）
2-1一个行为相对于一个story（故事/用户操作过程）
2-2测试描述写的是用户的操作过程





